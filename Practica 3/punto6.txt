Monitor Comision { 

  int cant = 0;
  cond filaEspera, inicio, notasEntregadas[25];
  Array Grupo[50], Notas[25]
  Cola filaAlumnos,Entregados;

  Procedure llegada (id,var migrupo){ 
    cant ++;
    filaAlumnos.push(id)
    if (cant == 50) 
        signal (inicio);
    wait (filaEspera);
    miGrupo = Grupo[id]
}
  
  Procedure Iniciar (){ 
      if (cant < 50) 
          wait (inicio);
      for (int i=0; i<50; i++){
            id = filaAlumnos.pop();
            Grupo[id] = AsignasGrupo();
            signal(espera);
      }
  }  

  Procedure Terminar(var Nota), miGrupo{ 
      Entregados.push(miGrupo);
      signal(inicio);
      wait(notasEntregados[miGrupo]);
      Nota = Notas[miGrupo]
  }  

  Procedure EntregarNota(var Array NotasEntregadasJTP, nota){
      if(empty(Entegados)){
          wait(inicio);
      }
      grupo = Entregados.pop();
      NotasEntregadasJTP[grupo]++;
      if(NotasEntregadasJTP[grupo] == 2){
          Notas[grupo] = nota;
          nota--
          signal.all(notasEntregadas[grupo])
      }
  }
  
}

Process Alumnos[id: 0..50-1]{ 
    Comision.llegada(id,migrupo);
    HaerExamen();
    Comision.Terminar(Nota,migrupo);
    
}

Process JTP{ 
  nota = 25
  NotasEntregadas[25]
  Comision.Iniciar();
  for (int i=0; i<50; i++){
          Comision.EntregarNota(NotasEntregadas,nota);
      }
}