En  un  examen  final  hay  N  alumnos  y  P  profesores.  
Cada  alumno  resuelve  su  examen,  lo  entrega  y  espera  a  que  alguno  de  los  profesores  lo  corrija  y  
le  indique  la  nota.  
Los profesores corrigen los exámenes respetando el orden en que los alumnos van entregando.  
a. Considerando que P=1. 
b. Considerando que P>1. 
c. Ídem  b.  pero  considerando  que  los  alumnos  no  comienzan  a  realizar  su  examen  hasta 
que todos hayan llegado al aula. 
Nota: maximizar la concurrencia y no generar demora innecesaria.

a.

Process Admin{
    cola buffer;
    string examen;
    int id;

    do Alumno[*]?entrega(examen,id) --> buffer.push(examen,id);
    0   !empty(buffer);     Profesor?pedido() -->
                Profesor!entrega(buffer.pop());
    od;
}

Process Profesor{
    string examen;
    int id;

    while(True){
        Admin!pedido();
        Admin?entrega(examen,id);

        nota = corregirExamen(examen);
        Alumno[id]!nota(nota);
    }  
}

Process Alumno[id:1..N]{

    String examen;
    int nota;

    examen = realizarExamen();
    Admin!entrega(examen,id);
    Profesor?nota(nota);
}

b.

Process Admin{
    cola buffer;
    string examen;
    int id,idP;

    do Alumno[*]?entrega(examen,id) --> buffer.push(examen,id);
    0   !empty(buffer);     Profesor[*]?pedido(idP) -->
                Profesor[idP]!entrega(buffer.pop());
    od;
}

Process Profesor[id:1..P]{
    string examen;
    int idC;

    while(True){
        Admin!pedido(id);
        Admin?entrega(examen,idC);

        nota = corregirExamen(examen);
        Alumno[idC]!nota(nota);
    }  
}

Process Alumno[id:1..N]{

    String examen;
    int nota;

    examen = realizarExamen();
    Admin!entrega(examen,id);
    Profesor[*]?nota(nota);
}

c.

Process AdminLlegada{
    int cant=0;

    do cant < N; Alumno[*]?llegue() --> cant++;
    O  cant = 80; Alumno[*]?llegue() --> for(int i=0; i<N; i++){
                                                Alumno[i]!empiecen();
                                        }
    od

}

Process Admin{
    cola buffer;
    string examen;
    int id,idP;

    do Alumno[*]?entrega(examen,id) --> buffer.push(examen,id);
    0   !empty(buffer);     Profesor[*]?pedido(idP) -->
                Profesor[idP]!entrega(buffer.pop());
    od;
}

Process Profesor[id:1..P]{
    string examen;
    int idC;

    while(True){
        Admin!pedido(id);
        Admin?entrega(examen,idC);

        nota = corregirExamen(examen);
        Alumno[idC]!nota(nota);
    }  
}

Process Alumno[id:1..N]{

    String examen;
    int nota;

    AdminLlegada!llegue();
    AdminLlegada?empiecen();

    examen = realizarExamen();
    Admin!entrega(examen,id);
    Profesor[*]?nota(nota);
}

